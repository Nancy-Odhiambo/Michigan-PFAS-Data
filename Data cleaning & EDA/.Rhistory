#| include: false
library(tidyverse)
library(naniar)
library(janitor)
library(sf)
# Create function to add geoid variable given longitude and latitude for county-level data
add_geoid <- function(my_data) {
# Create sf object to help add geoid column
my_data_sf <- my_data |>
st_as_sf(coords = c("longitude", "latitude"))
# Set coordinate reference system (CRS) to match counties data
counties <- st_read("GeoFiles//cb_2018_us_county_500k.shp")
st_crs(my_data_sf) <- st_crs(counties)
ret_data <- my_data_sf |>
st_join(counties) |>
mutate(longitude = st_coordinates(geometry)[, 1],
latitude = st_coordinates(geometry)[, 2]) |>
st_drop_geometry() |>
as_tibble() |>
dplyr::select(GEOID, longitude, latitude) |>
dplyr::rename(geoid = GEOID) |>
distinct() |>
right_join(my_data)
return(ret_data)
}
#| eval: true
#| include: false
# Importing data on PFAS levels in surface water in Michigan
analyte_info <- read_csv("PFAS_Surface_Water_Sampling.csv") |>
dplyr::select(-c(X:Latitude, GlobalID, OBJECTID,
ends_with("Flag")))
surface_water <- read_csv("PFAS_Surface_Water_Sampling.csv") |>
clean_names() |>
dplyr::select(-ends_with("_flag")) |>
dplyr::select(-c(cas307244_pf_hx_a:cas919005144_adona_rl)) |>
bind_cols(analyte_info)
# Importing data on surface water data dictionary
surface_water_dictionary <- read_csv("surface_water_data_dictionary.csv")
# Creating long version of surface water data
surface_water_long <- surface_water |>
dplyr::rename(object_id = objectid) |>
dplyr::select(longitude, latitude, object_id, everything(),
-c(x:y), -ends_with("Flag"), -global_id) |>
pivot_longer(cols = colnames(analyte_info),
names_to = "analyte",
values_to = "analyte_value") |>
dplyr::select(-matrix, -unit, -object_id) |>
add_geoid()
# Saving to external CSV
write_csv(surface_water_long, file = "pfas_surface_water_long.csv")
#| eval: true
#| include: false
# Importing shape file data for public water supply PFAS levels data
public_water_shape <- st_read("Public_Water_Supply_Sampling_Hexbins_and_Results/Public_Water_Supply_Sampling_Hexbins.shp") |>
mutate(centroid = st_centroid(geometry),
longitude = st_coordinates(centroid)[, 1],
latitude = st_coordinates(centroid)[, 2]) |>
dplyr::select(HexID, longitude, latitude) |>
st_drop_geometry() |>
as_tibble()
# Importing data on public water supply PFAS levels
public_water <- read_csv("Public_Water_Supply_Sampling_Hexbins_and_Results.csv")
# Adding geoid, longitude, and latitude information to public water data
# and cleaning variable names
public_water_wide <- public_water |>
left_join(public_water_shape, by = "HexID") |>
dplyr::select(-ends_with(c("Result", "Flags"))) |>
clean_names() |>
dplyr::rename(object_id = objectid) |>
dplyr::select(object_id:sys_loc_code, longitude, latitude, everything()) |>
bind_cols(dplyr::select(public_water, ends_with("Result"))) |>
add_geoid()
# Pivoting public water data from wide to long format
public_water_long <- public_water_wide |>
pivot_longer(cols = c(ends_with(c("Result"))),
names_to = "analyte",
values_to = "analyte_value") |>
mutate(analyte = gsub(analyte, pattern = "Result", replacement = "")) |>
dplyr::select(-c(hex_id,
wssn, loc_name:sys_loc_code,
phase_code:task_type,
treatment_status:sys_sample_code,
lab_number:lab_sdg,
object_id, position_source,
analytical_method,
sampling_results_count)) |>
mutate(system_type = fct_recode(system_type,
"Non-Community Water Supply (Adult Foster Care Provider)" = "ADFSTC",
"Non-Community Water Supply (Children's Camp)" = "CHLCMP",
"Non-Community Water Supply (Child Care Provider)" = "DAYCARE",
"Non-Community Water Supply (Industry)" = "INDUS",
"Non-Community Water Supply (Medical Care Provider)" = "MEDCAR",
"Non-Community Water Supply (Hotel or Motel)" = "MOTEL",
"Community Water Supply (for example Municipal Supply, Apartment, Nursing Home, Prison, etc.)" = "MUN",
"Office Building" = "OFFICE",
"Park" = "PARK",
"Residential" = "RESD",
"School" = "SCH",
"Tribal Lands" = "TRB"))
# Saving to external CSV
write_csv(public_water_long, file = "pfas_public_water_long.csv")
getwd()
list.files()
list.files("Public_Water_Supply_Sampling_Hexbins_and_Results")
#| eval: true
#| include: false
pfas_site_path <- "pfas_sites.csv"
if(file.exists(pfas_site_path) == FALSE) {
# Importing data on identified sites from https://www.michigan.gov/pfasresponse
# Downloaded on 02/25/2025
pfas_sites <- read_csv("Michigan_PFAS_Sites.csv") |>
janitor::clean_names() |>
dplyr::select(facility:site_type, location:military, facility_date, site_background:anticipated_activities, -tier, -site_type) |>
add_geoid()
# Saving cleaned data
write_csv(pfas_sites, file = pfas_site_path)
} else {
# Importing
pfas_sites <- read_csv(pfas_site_path)
}
# Creating data dictionary
clean_surface_water_dictionary <- surface_water_dictionary |>
dplyr::rename(Variable = `Field Name`) |>
mutate(Variable = case_when(!str_starts(Variable, pattern = "CA") ~ make_clean_names(Variable),
TRUE ~ Variable)) |>
dplyr::filter(Variable %in% colnames(surface_water_long)) |>
bind_rows(tibble(Variable = c("geoid",
"analyte",
"analyte_value"),
Description = c("geographic region ID with the first 2 digits being the state Federal Information Processing Standard (FIPS) code \nand the last 3 digits the county FIPS code",
"PFAS analyte",
"The analyte concentration in the sample measured in parts per trillion (ppt or ng/L)"))) |>
mutate(Variable = factor(Variable, levels = colnames(surface_water_long))) |>
arrange(Variable)
# Printing data dictionary
clean_surface_water_dictionary |>
gt()
#| include: false
#| eval: true
# Aggregating PFAS values for most recent measurement of each site
surface_water_total <- surface_water_long |>
dplyr::mutate(watershed = case_when(watershed == "Huron" ~ "Lake Huron",
TRUE ~ watershed)) |>
group_by(geoid, longitude, latitude, site_code, location_code, watershed, waterbody) |>
slice_max(collection_date, n = 1) |>
group_by(geoid, longitude, latitude, collection_date, site_code, location_code, watershed, waterbody) |>
summarize(total_analytes = sum(analyte_value, na.rm = TRUE)) |>
ungroup()
# Ten highest PFAS locations
surface_water_total |>
slice_max(total_analytes, n = 10)
# Side-by-side box plots of total PFAS levels by Great Lake
surface_water_total |>
dplyr::filter(str_detect(watershed, pattern = "Huron|Lake"),
!str_detect(watershed, pattern = "Clair|Lone")) |>
ggplot(aes(y = fct_reorder(watershed, total_analytes, .fun = max),
x = total_analytes)) +
geom_boxplot() +
labs(title = "PFAS levels measured in the Great Lakes",
x = "Total analyte level (ppt)",
y = "") +
ggthemes::theme_few()
# Distribution of PFAS levels measured in Kent County
surface_water_total |>
dplyr::mutate(county_fips = str_sub(geoid, start = 3, end = 5)) |>
dplyr::filter(county_fips == "081") |>
ggplot(aes(x = total_analytes)) +
geom_histogram(color = "black", fill = "dodgerblue") +
scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
labs(title = "PFAS levels measured in Kent County",
x = "Total analyte level (ppt)",
y = "Frequency") +
ggthemes::theme_few()
# Occurrences of different analytes
analyte_summary <- surface_water_long |>
dplyr::mutate(watershed = case_when(watershed == "Huron" ~ "Lake Huron",
TRUE ~ watershed)) |>
group_by(geoid, longitude, latitude, site_code, location_code, watershed, waterbody) |>
slice_max(collection_date, n = 1) |>
ungroup() |>
dplyr::filter(analyte_value > 0) |>
group_by(analyte) |>
summarize(min = min(analyte_value),
Q1 = quantile(analyte_value, probs = 0.25),
median = quantile(analyte_value, probs = 0.5),
Q2 = quantile(analyte_value, probs = 0.75),
max = max(analyte_value),
total = sum(analyte_value),
n_detected = n()) |>
arrange(desc(total))
# Ten highest analytes
analyte_summary |>
slice_max(total, n = 10)
# Number of unique analytes detected by Great Lake
surface_water_long |>
dplyr::mutate(watershed = case_when(watershed == "Huron" ~ "Lake Huron",
TRUE ~ watershed)) |>
dplyr::filter(str_detect(watershed, pattern = "Huron|Lake"),
!str_detect(watershed, pattern = "Clair|Lone"),
analyte_value > 0) |>
count(watershed, analyte) |>
count(watershed)
# Creating data dictionary
clean_public_water_dictionary <- surface_water_dictionary |>
dplyr::rename(Variable = `Field Name`) |>
mutate(Variable = case_when(!str_starts(Variable, pattern = "CA") ~ make_clean_names(Variable),
TRUE ~ Variable)) |>
dplyr::filter(Variable %in% colnames(public_water_long)) |>
bind_rows(tibble(Variable = c("geoid",
"system_name",
"system_type",
"sample_date",
"lab_name_code",
"analyte",
"analyte_value"),
Description = c("geographic region ID with the first 2 digits being the state Federal Information Processing Standard (FIPS) code \nand the last 3 digits the county FIPS code",
"Name of water supply system",
"Type of water supply system",
"The date that the sample was collected",
"Code for processing lab",
"PFAS analyte",
"The analyte concentration in the sample measured in parts per trillion (ppt or ng/L)"))) |>
mutate(Variable = factor(Variable, levels = colnames(public_water_long))) |>
arrange(Variable)
# Printing data dictionary
clean_public_water_dictionary |>
gt()
pfas_sites_descriptions <- c(
"Geographic region ID with the first 2 digits being the state Federal Information Processing Standard (FIPS) code \nand the last 3 digits the county FIPS code",
"Longitude coordinate of sample location",
"Latitude coordinate of sample location",
"Name of the site",
"County where the site is located",
"Physical address of the project site",
"City where the project is physically located",
"Zip code where the project is physically located",
"Describes the kind of site by type",
"Indicates whether residential wells have, or will be sampled (Domains = Yes, No, TBD, N/A)",
"Name of contact person",
"Contact person email",
"Contact person phone number",
"Web address to the site investigation summary",
"Geographic location description of the site",
"Indicates if the site is associated with the military",
"Date the site was published on the Michigan PFAS Action Response Team website",
"Background information about the site",
"Information about drinking water quality and safety",
"The state of Michigan's planned or upcoming activities related to the site"
)
# Printing data dictionary
pfas_sites |>
data_dictionary(descripts = pfas_sites_descriptions)
library(skimr)
# Exploring the data set using skim package
# Surface water dataset
skim(surface_water_long)
# Public water supply dataset
skim(public_water_long)
# PFAS sites dataset
skim(pfas_sites)
library(tidyverse)
library(sf)
library(patchwork)
library(janitor)
library(naniar)
library(skimr)
library(ggrepel)
library(ggthemes)
library(viridis)
library(scales)
library(reshape2)
library(ggcorrplot)
# % Missingness in surafce water data
gg_miss_var(surface_water_long, show_pct = TRUE) +
labs(title = "Missingness by Variable: PFAS Surface Water Data",
caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE",
x = "Variable Name",
y = "% Missingness")
# % Missingness in public water
gg_miss_var(public_water_long, show_pct = TRUE) +
labs(title = "Missingness by Variable: PFAS Surface Water Data",
caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE",
x = "Variable Name",
y = "% Missingness")
# % Missingness in PFAS sites
gg_miss_var(pfas_sites, show_pct = TRUE) +
labs(title = "Missingness by Variable: PFAS Surface Water Data",
caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE",
x = "Variable Name",
y = "% Missingness")
# Bar plots showing the surface water PFAS concentration by top and bottom 15 counties
ggplot(pfas_top_bottom, aes(x = fct_reorder(NAME, mean_value),
y = mean_value,
fill = group)) +
geom_col() +
geom_text(aes(label = round(mean_value, 1)),
hjust = -0.05, size = 3.2) +
coord_flip() +
scale_fill_manual(values = c("Top 15" = "mediumseagreen", "Bottom 15" = "orange")) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +
facet_wrap(~group, scales = "free_y") +
labs(
title = "Surface Water PFAS by Top and Bottom 15 Counties",
x = "County",
y = "Mean PFAS (ng/L)",
caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE"
) +
theme_minimal() +
theme(plot.title = element_text(face = "bold", size = 15),
axis.title.y = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
plot.caption = element_text(face = "bold"),
legend.position = "none")
# Top 10 analyte category by total % & absolute concentration
surface_water_long |>
filter(analyte_value > 0) |>
group_by(analyte) |>
summarize(total_concentration = sum(analyte_value, na.rm = TRUE)) |>
ungroup() |>
mutate(share = total_concentration / sum(total_concentration)) |>
slice_max(share, n = 10) |>
ggplot(aes(x = fct_reorder(analyte, share),
y = share,
fill = share)) +
geom_col() +
geom_text(aes(
label = paste0(
percent(share, accuracy = 0.1),
" (", comma(round(total_concentration, 1)), " ng/L)"
)),
hjust = -0.05, size = 3.2
) +
coord_flip() +
scale_y_continuous(labels = percent_format(accuracy = 1),
expand = expansion(mult = c(0, 0.15))) +
scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 20)) +
scale_fill_viridis_c(option = "cividis", direction = -1) +
labs(title = "Top 10 PFAS Analytes in Surface Water",
x = "Analyte_Category",
y = "Share of Total PFAS Concentration",
fill = "Share",
caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE") +
theme_minimal() +
theme(plot.title = element_text(face = "bold", size = 15),
axis.title.y = element_text(face = "bold"),
axis.title.x = element_text(face = "bold"),
plot.caption = element_text(face = "bold"),
legend.position = "none")
# Map of average surface water PFAS by county
public_county_map <- surface_water_long |>
group_by(geoid) |>
summarize(mean_value = mean(analyte_value, na.rm = TRUE)) |>
ungroup() |>
left_join(mi_counties, by = c("geoid" = "GEOID")) |>
st_as_sf()
# Choropleth plot
ggplot(public_county_map) +
geom_sf(aes(fill = mean_value), color = "white") +
scale_fill_viridis_c(option = "magma", na.value = "grey90") +
labs(
title = "Mean PFAS Concentration in Surface Water by County",
x = "Longitude",
y = "Latitude",
fill = "Mean PFAS (ng/L)",
caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE") +
theme_minimal()
# Top 10 public water systems by mean PFAS
public_water_top10 <- public_water_long |>
group_by(system_name) |>
summarize(mean_value = mean(analyte_value, na.rm = TRUE)) |>
ungroup() |>
slice_max(order_by = mean_value, n = 10)
# Improved bar plot
ggplot(public_water_top10, aes(x = fct_reorder(system_name, mean_value), y = mean_value, fill = mean_value)) +
geom_col() +
geom_text(aes(label = round(mean_value, 2)), hjust = -0.1, size = 3.5) +
coord_flip() +
scale_fill_viridis_c(option = "viridis", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 25)) +
labs(
title = "Top 10 Public Water Systems by Mean PFAS",
x = "Public Water System",
y = "Mean PFAS (ng/L)",
fill = "Mean PFAS",
caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE"
) +
theme_minimal() +
theme(
plot.title = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
legend.position = "none"
) +
expand_limits(y = max(public_water_top20$mean_value) * 1.1)
# Top 10 PFAS analytes in public water
top_analytes <- public_water_long |>
filter(analyte_value > 0) |>
group_by(analyte) |>
summarize(total_concentration = sum(analyte_value, na.rm = TRUE), .groups = "drop") |>
slice_max(total_concentration, n = 10)
# Improved bar plot
ggplot(top_analytes, aes(x = fct_reorder(analyte, total_concentration),
y = total_concentration,
fill = total_concentration)) +
geom_col() +
geom_text(aes(label = comma(round(total_concentration, 1))),
hjust = -0.05, size = 3.5) +  # labels outside bars
coord_flip() +
scale_fill_viridis_c(option = "cividis", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 20)) +  # wrap long names
labs(
title = "Top 10 PFAS Analytes in Public Water Systems",
x = "PFAS Analyte",
y = "Total PFAS Concentration (ng/L)",
fill = "Total Concentration",
caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16),
axis.title = element_text(face = "bold"),
legend.position = "none"
) +
expand_limits(y = max(top_analytes$total_concentration) * 1.1)  # space for labels
# Map of average public water PFAS by county
public_county_map <- public_water_long |>
group_by(geoid) |>
summarize(mean_value = mean(analyte_value, na.rm = TRUE), .groups = "drop") |>
left_join(mi_counties, by = c("geoid" = "GEOID")) |>
st_as_sf()
ggplot(public_county_map) +
geom_sf(aes(fill = mean_value), color = "white") +
scale_fill_viridis_c(option = "magma", na.value = "grey90") +
labs(
title = "Mean PFAS Concentration in Public Water by County",
x = "Longitude",
y = "Latitude",
fill = "Mean PFAS (ng/L)",
caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE") +
theme_minimal()
# Top 10 counties by PFAS site count
sites_top10_counties <- pfas_sites |>
count(county, sort = TRUE) |>
slice_max(n, n = 10)
# Improved bar plot with proper label positioning
ggplot(sites_top10_counties, aes(x = fct_reorder(county, n), y = n, fill = n)) +
geom_col() +
geom_text(aes(label = n), hjust = -0.02, size = 3.5) +  # slightly closer to bar
coord_flip() +
scale_fill_viridis_c(option = "viridis", direction = -1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 20)) +
scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
labs(
title = "Top 10 Counties by Number of PFAS Sites",
x = "County",
y = "Number of PFAS Sites",
fill = "Site Count",
caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16),
axis.title = element_text(face = "bold"),
legend.position = "none"
)
# Convert to spatial points
pfas_sites_sf <- pfas_sites |>
st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
ggplot() +
geom_sf(data = mi_counties, fill = "grey90", color = "white") +
geom_sf(data = pfas_sites_sf, aes(color = type), size = 2, alpha = 0.7) +
scale_color_viridis_d() +
labs(
title = "PFAS Sites Across Michigan",
color = "Site Type",
caption = "Data source: MPART, EGLE"
) +
theme_minimal()
# Number of PFAS sites per type
pfas_sites |>
mutate(type = str_replace_all(type, "mlitary", "military"),
type = str_to_title(type)) |>
count(type, sort = TRUE) |>
ggplot(aes(x = fct_reorder(type, n), y = n, fill = n)) +
geom_col() +
geom_text(aes(label = n),
hjust = -0.05,  # slightly outside the bar
size = 3.5) +
coord_flip() +
scale_fill_viridis_c(option = "cividis") +
scale_x_discrete(labels = function(x) str_wrap(x, width = 20)) +
scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +  # add 15% space at top
labs(
title = "Number of PFAS Sites by Type",
x = "Site Type",
y = "Number of Sites",
fill = "Count",
caption = "Data source: MPART, EGLE"
) +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
# Surface water
surface_water_long |>
pull(collection_date) |>
unique() |>
sort() |>
head(20)
# Public water
public_water_long |>
pull(sample_date) |>
unique() |>
sort() |>
head(20)
