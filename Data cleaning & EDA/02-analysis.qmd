---
title: "Michigan PFAS Data"
format:
  html:
    toc: true
    self-contained: true
    embed-resources: true
execute:
  echo: false  # Do not show code
  warning: false  # Suppress warnings
  message: false  # Suppress messages
  output: true  # Show output
---

```{r}
#| include: false
set.seed(1994)

# Loading necessary packages
library(tidyverse)
library(naniar)
library(janitor)
library(sf)
library(gt)
library(skimr)
library(tidycensus)
library(maps)
library(patchwork)
library(ggrepel)
library(ggthemes)
library(scales)
library(reshape2)
library(ggcorrplot)
library(flextable)
library(dplyr)
library(tidyr)

# Function for creating data dictionary
data_dictionary <- function(myData, descripts) {
tibble(Variable = colnames(myData),
       Type = map_chr(myData, .f = function(x){typeof(x)[1]}),
       Description = descripts) |> 
  gt()
}
```

```{r PFAS_packages}
#| eval: true
#| include: false

# Create function to add geoid variable given longitude and latitude for county-level data
add_geoid <- function(my_data) {
  # Create sf object to help add geoid column
my_data_sf <- my_data |> 
st_as_sf(coords = c("longitude", "latitude"))

# Set coordinate reference system (CRS) to match counties data
counties <- st_read("GeoFiles//cb_2018_us_county_500k.shp")
st_crs(my_data_sf) <- st_crs(counties)

ret_data <- my_data_sf |> 
  st_join(counties) |> 
    mutate(longitude = st_coordinates(geometry)[, 1],
           latitude = st_coordinates(geometry)[, 2]) |> 
  st_drop_geometry() |> 
  as_tibble() |> 
  dplyr::select(GEOID, longitude, latitude) |> 
  dplyr::rename(geoid = GEOID) |> 
  distinct() |> 
  right_join(my_data)

return(ret_data)
}
```


```{r PFAS_surface_clean}
#| eval: true
#| include: false

# Importing data on PFAS levels in surface water in Michigan
analyte_info <- read_csv("PFAS_Surface_Water_Sampling.csv") |> 
              dplyr::select(-c(X:Latitude, GlobalID, OBJECTID,
                               ends_with("Flag")))

surface_water <- read_csv("PFAS_Surface_Water_Sampling.csv") |> 
  clean_names() |> 
  dplyr::select(-ends_with("_flag")) |> 
  dplyr::select(-c(cas307244_pf_hx_a:cas919005144_adona_rl)) |> 
  bind_cols(analyte_info)

# Importing data on surface water data dictionary
surface_water_dictionary <- read_csv("surface_water_data_dictionary.csv")

# Creating long version of surface water data
surface_water_long <- surface_water |> 
  dplyr::rename(object_id = objectid) |> 
  dplyr::select(longitude, latitude, object_id, everything(), 
                -c(x:y), -ends_with("Flag"), -global_id) |> 
  pivot_longer(cols = colnames(analyte_info), 
               names_to = "analyte", 
               values_to = "analyte_value") |> 
  dplyr::select(-matrix, -unit, -object_id) |> 
  add_geoid()

# Saving to external CSV
write_csv(surface_water_long, file = "pfas_surface_water_long.csv")
```


```{r PFAS_public_clean}
#| eval: true
#| include: false

# Importing shape file data for public water supply PFAS levels data
public_water_shape <- st_read("Public_Water_Supply_Sampling_Hexbins_and_Results/Public_Water_Supply_Sampling_Hexbins.shp") |> 
  mutate(centroid = st_centroid(geometry),
         longitude = st_coordinates(centroid)[, 1],
         latitude = st_coordinates(centroid)[, 2]) |> 
  dplyr::select(HexID, longitude, latitude) |> 
  st_drop_geometry() |> 
  as_tibble()

# Importing data on public water supply PFAS levels
public_water <- read_csv("Public_Water_Supply_Sampling_Hexbins_and_Results.csv")

# Adding geoid, longitude, and latitude information to public water data
# and cleaning variable names
public_water_wide <- public_water |> 
  left_join(public_water_shape, by = "HexID") |> 
  dplyr::select(-ends_with(c("Result", "Flags"))) |> 
  clean_names() |> 
  dplyr::rename(object_id = objectid) |> 
  dplyr::select(object_id:sys_loc_code, longitude, latitude, everything()) |> 
  bind_cols(dplyr::select(public_water, ends_with("Result"))) |> 
  add_geoid()

# Pivoting public water data from wide to long format
public_water_long <- public_water_wide |> 
  pivot_longer(cols = c(ends_with(c("Result"))), 
               names_to = "analyte", 
               values_to = "analyte_value") |> 
  mutate(analyte = gsub(analyte, pattern = "Result", replacement = "")) |> 
  dplyr::select(-c(hex_id, 
                   wssn, loc_name:sys_loc_code, 
                   phase_code:task_type,
                   treatment_status:sys_sample_code,
                   lab_number:lab_sdg, 
                   object_id, position_source,
                   analytical_method,
                   sampling_results_count)) |> 
  mutate(system_type = fct_recode(system_type,
                               "Non-Community Water Supply (Adult Foster Care Provider)" = "ADFSTC",
                               "Non-Community Water Supply (Children's Camp)" = "CHLCMP",
                               "Non-Community Water Supply (Child Care Provider)" = "DAYCARE",
                               "Non-Community Water Supply (Industry)" = "INDUS",
                               "Non-Community Water Supply (Medical Care Provider)" = "MEDCAR",
                               "Non-Community Water Supply (Hotel or Motel)" = "MOTEL",
                               "Community Water Supply (for example Municipal Supply, Apartment, Nursing Home, Prison, etc.)" = "MUN",
                               "Office Building" = "OFFICE",
                               "Park" = "PARK",
                               "Residential" = "RESD",
                               "School" = "SCH",
                               "Tribal Lands" = "TRB"))


# Saving to external CSV
write_csv(public_water_long, file = "pfas_public_water_long.csv")
```


```{r PFAS_sites_import}
#| eval: true
#| include: false

pfas_site_path <- "pfas_sites.csv"

if(file.exists(pfas_site_path) == FALSE) {
# Importing data on identified sites from https://www.michigan.gov/pfasresponse
# Downloaded on 02/25/2025
pfas_sites <- read_csv("Michigan_PFAS_Sites.csv") |> 
  janitor::clean_names() |> 
  dplyr::select(facility:site_type, location:military, facility_date, site_background:anticipated_activities, -tier, -site_type) |> 
  add_geoid()

# Saving cleaned data
write_csv(pfas_sites, file = pfas_site_path)
} else {
  # Importing
  pfas_sites <- read_csv(pfas_site_path)
}
```

```{r}
skim(pfas_sites)
```

```{r}
skim(surface_water_long)
```

```{r}
skim(public_water_wide)
```

```{r}
glimpse(public_water_wide)
```

```{r}
# % Missingness in surafce water data
gg_miss_var(surface_water_long, show_pct = TRUE) +
  labs(title = "Missingness by Variable: PFAS Surface Water Data",
       caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE",
       x = "Variable Name",
       y = "% Missingness")

# % Missingness in focus columns of public water data set
gg_miss_var(public_water_wide |> 
    select(hex_id, PFOAResult, PFOSResult, PFNAResult, PFHxSResult, PFBSResult, HFPODAResult, PFHxAResult),
  show_pct = TRUE) +
  labs(title = "Missingness: Key PFAS Compounds and Hex ID",
       x = "Variable Name",
       y = "% Missingness",
       caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE")

# % Missingness in PFAS sites
gg_miss_var(pfas_sites, show_pct = TRUE) +
  labs(title = "Missingness by Variable: PFAS Surface Water Data",
       caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE",
       x = "Variable Name",
       y = "% Missingness")
```

```{r}
# Drop flag columns, replace NA in PFAS Result columns with 0, and ensure numeric
public_water_wide <- public_water_wide |> 
  select(-ends_with("Flags")) |> 
  mutate(across(ends_with("Result"), ~replace_na(as.numeric(.x), 0)))

# Calculating the hazard index
public_water_wide <- public_water_wide |>
  mutate(Hazard_Index = (HFPODAResult / 10) +
         (PFNAResult / 10) +
         (PFBSResult / 2000) +
         (PFHxSResult / 10))

# Show first 5 rows
head(public_water_wide, 5)
```

```{r}
# Displaying the high index areas with the highest analyte contributor in a table
high_hazard <- public_water_wide |> 
  filter(Hazard_Index > 1) |> 
  select(hex_id, Hazard_Index, HFPODAResult, PFNAResult, PFBSResult, PFHxSResult) |> 
  arrange(desc(Hazard_Index)) |> 
  flextable() |> 
  set_caption("Public Water Locations with Hazard Index > 1") |> 
  autofit()

high_hazard
```

```{r}
# Extracting the maximum hazard per hex ID
public_water_max <- public_water_wide |> 
  group_by(hex_id) |> 
  slice_max(order_by = Hazard_Index, n = 1, with_ties = FALSE) |> 
  ungroup()

# View the first few rows
head(public_water_max, 5)
```

```{r}
# Viewing the high hazard sites after getting the maximum per hex ID
high_hazard_max <- public_water_max |> 
  filter(Hazard_Index > 1) |> 
  select(hex_id, Hazard_Index, HFPODAResult, PFNAResult, PFBSResult, PFHxSResult) |> 
  arrange(desc(Hazard_Index)) |> 
  flextable() |> 
  set_caption("Public Water Locations with Hazard Index > 1 (Max per Hex ID)") |> 
  autofit()

high_hazard_max
```

```{r}
# Changing the wide format to long format
public_water_max_long <- public_water_max |>
pivot_longer(cols = ends_with("Result"),   
               names_to = "analyte",
               values_to = "analyte_value") |>
mutate(analyte = gsub("Result$", "", analyte))

head(public_water_max_long, 5)
```

```{r}
# Aggregate Hazard Index by county
county_hazard <- public_water_max |>
filter(Hazard_Index > 1) |>
distinct(hex_id, Hazard_Index, geoid) |>  # one hazard index per site
group_by(geoid) |>
summarise(total_hazard = sum(Hazard_Index, na.rm = TRUE)) |>
              ungroup() |>
left_join(st_read("GeoFiles/cb_2018_us_county_500k.shp") |> 
st_drop_geometry() |> 
dplyr::select(GEOID, NAME, STATEFP),
    by = c("geoid" = "GEOID")) |>
filter(!is.na(NAME))

# Plot hazard index by county
county_hazard |>
ggplot(aes(x = reorder(NAME, total_hazard), y = total_hazard, fill = total_hazard)) +
geom_col() +
coord_flip() +
labs(title = "Public Water Locations with Hazard Index > 1 by County",
     x = "County",
     y = "Total Hazard Index",
     caption = "Data source: Michigan PFAS Action Response Team (MPART)") +
scale_fill_viridis_c(option = "viridis") +
theme_minimal()
```

```{r}
# Changing the system_type values to be more descriptive
public_water_max_long <- public_water_max_long |>
mutate(system_type = recode(system_type,
    "ADFSTC" = "Non-Community Water Supply (Adult Foster Care Provider)",
    "CHLCMP" = "Non-Community Water Supply (Children's Camp)",
    "DAYCARE" = "Non-Community Water Supply (Child Care Provider)",
    "INDUS" = "Non-Community Water Supply (Industry)",
    "MEDCAR" = "Non-Community Water Supply (Medical Care Provider)",
    "MOTEL" = "Non-Community Water Supply (Hotel or Motel)",
    "MUN" = "Community Water Supply (for example Municipal Supply, Apartment, Nursing Home, Prison, etc.)",
    "OFFICE" = "Office Building",
    "PARK" = "Park",
    "RESD" = "Residential",
    "SCH" = "School",
    "TRB" = "Tribal Lands"
  ))
```

```{r}
# Total hazard index per system type
summary_table <- public_water_max_long |>
distinct(system_type, hex_id, Hazard_Index) |>  
group_by(system_type) |>
summarise(total_hazard = sum(Hazard_Index, na.rm = TRUE),
          n_sites = n()) |>
ungroup() |>
arrange(desc(total_hazard))

flextable(summary_table) |>
set_header_labels(system_type = "System Type",
                  total_hazard = "Total Hazard",
                  n_sites = "Number of Sites") |>
theme_vanilla() |>
autofit()
```

```{r}
# Plotting Mean analyte concnetration per system_name 
hazard_analytes <- c("HFPODA", "PFNA", "PFBS", "PFHxS")

unique_values <- public_water_max_long |>
distinct(hex_id, system_name, analyte, analyte_value) |>
mutate(analyte = ifelse(analyte %in% hazard_analytes, analyte, "others"),
       system_name = tolower(system_name))

# Aggregate mean analyte value by system name
mean_by_system <- unique_values |>
group_by(system_name, analyte) |>
summarise(mean_value = mean(analyte_value, na.rm = TRUE), .groups = "drop")

top_systems <- mean_by_system |>
group_by(system_name) |>
summarise(total_mean = sum(mean_value)) |>
  ungroup() |>
arrange(desc(total_mean)) |>
slice_head(n = 10)

# Filter for top 10 systems names
plot_data <- mean_by_system |>
filter(system_name %in% top_systems$system_name)

plot_data <- plot_data |>
mutate(system_name = factor(system_name, levels = top_systems$system_name))

ggplot(plot_data, aes(x = system_name, y = mean_value, fill = analyte)) +
geom_col(position = position_dodge(width = 0.7), width = 0.7) +  
  scale_fill_viridis_d(option = "plasma") +
  labs(title = "Mean PFAS Analyte Levels by Top 10 Systems",
       x = "System Name",
       y = "Mean Analyte Value",
       fill = "Analyte",
       caption = "Data source: Michigan PFAS Action Response Team (MPART)") +
  theme_minimal() +
  theme(legend.position = "right",
    axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
# Plot of counties with hazard index > 1
# Aggregate Hazard Index by county
county_hazard <- public_water_max |>
filter(Hazard_Index > 1) |>
distinct(hex_id, Hazard_Index, geoid) |>  # one hazard index per site
group_by(geoid) |>
summarise(total_hazard = sum(Hazard_Index, na.rm = TRUE)) |>
              ungroup() |>
left_join(st_read("GeoFiles/cb_2018_us_county_500k.shp") |> 
st_drop_geometry() |> 
dplyr::select(GEOID, NAME, STATEFP),
    by = c("geoid" = "GEOID")) |>
filter(!is.na(NAME))

# Bar plot of counties which have high hazard index
county_hazard |>
ggplot(aes(x = reorder(NAME, total_hazard), y = total_hazard, fill = total_hazard)) +
geom_col() +
coord_flip() +
labs(title = "Public Water Locations with Hazard Index > 1 by County",
     x = "County",
     y = "Total Hazard Index",
     caption = "Data source: Michigan PFAS Action Response Team (MPART)") +
scale_fill_viridis_c(option = "viridis") +
theme_minimal()
```


```{r}
# Map of Hazard index distribution in Michigan
# Load Michigan counties shapefile
mi_counties <- st_read("GeoFiles/cb_2018_us_county_500k.shp") |>
  filter(STATEFP == "26")  

high_hazard_sites <- public_water_max_long |>
  filter(Hazard_Index > 1) |>
  distinct(hex_id, longitude, latitude, Hazard_Index, system_name, system_type)

# Convert to sf object using longitude and latitude
high_hazard_sf <- st_as_sf(high_hazard_sites, coords = c("longitude", "latitude"), crs = 4326)

ggplot() +
  geom_sf(data = mi_counties, fill = "grey", color = "black") + 
  geom_sf(data = high_hazard_sf, aes(size = Hazard_Index), color = "mediumseagreen", alpha = 0.7) +
  scale_size_continuous(range = c(2, 8)) +  
  labs(title = "Michigan Public Water Locations with Hazard Index > 1",
    size = "Hazard Index",
    x = "Longitude",
    y = "Latitude",
    caption = "Data source: Michigan PFAS Action Response Team (MPART)") +
  theme_minimal() +
  theme(legend.position = "right",
    axis.text = element_text(color = "black"),   
    axis.ticks = element_line(color = "black"))
```

```{r}
# Plot showing the pfas sites in Michigan
pfas_sites_sf <- pfas_sites |>
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326) |>
  mutate(type = str_replace_all(type, "mlitary", "military"),
         type = str_to_title(type)) 
ggplot() +
  geom_sf(data = mi_counties, fill = "grey90", color = "white") +
  geom_sf(data = pfas_sites_sf, aes(color = type), size = 1.5, alpha = 0.7) +
  scale_color_viridis_d() +
  labs(
    title = "PFAS Sites Across Michigan",
    color = "Site Type",
    caption = "Data source: Michigan PFAS Action Response Team (MPART), EGLE"
  ) +
  theme_minimal()
```

Joining the two data sets (PFAS sites and public_water_max_long)

```{r}
# Plotting the pfas sites with hazard index greater than 1 as per regulations
# Convert geoid to character for joining
pfas_sites <- pfas_sites |> 
  mutate(geoid = as.character(geoid))
# Join datasets allowing many-to-many
merged_data <- public_water_max_long |>
  left_join(pfas_sites, by = "geoid", relationship = "many-to-many")
# Aggregating to one row per hex_id for mapping
hazard_sites <- merged_data |>
  filter(Hazard_Index > 1) |>
  group_by(hex_id) |>
  slice(1) |>
  ungroup()
# Selecting the correct longitude/latitude columns
hazard_sites <- hazard_sites |>
  rename(lon = longitude.x,
         lat = latitude.x)
# Convert to sf object
hazard_sites_sf <- hazard_sites |>
  st_as_sf(coords = c("lon", "lat"), crs = 4326)
# Load Michigan shapefile
mi_counties <- st_read("GeoFiles/cb_2018_us_county_500k.shp") |>
  filter(STATEFP == "26") 
# Plot with color and size for Hazard_Index
ggplot() +
  geom_sf(data = mi_counties, fill = "lightgrey", color = "black") +
  geom_sf(data = hazard_sites_sf, aes(color = Hazard_Index, size = Hazard_Index)) +
  scale_color_viridis_c(option = "viridis") +
  scale_size_continuous(range = c(2,6)) +  
  coord_sf(xlim = c(-90, -82), ylim = c(41, 48)) +  
  theme_minimal() +
  labs(title = "PFAS Sites in Michigan by Hazard Index size and scale",
    color = "Hazard Index",
    size = "Hazard Index",
    caption = "Data source: Michigan PFAS Action Response Team (MPART)") +
  theme(legend.position = "right")
```


```{r}
# Plotting PFAS sites by type and the Hazard_Index scale 
# Filter for Hazard_Index strictly greater than 1
hazard_sites <- merged_data |>
  filter(Hazard_Index > 1, !is.na(type)) |>
  group_by(hex_id) |>
  slice(1) |>
  ungroup()
# Select correct longitude/latitude columns
hazard_sites <- hazard_sites |>
  rename(lon = longitude.x,
         lat = latitude.x)
# Convert to sf object
hazard_sites_sf <- hazard_sites |>
  st_as_sf(coords = c("lon", "lat"), crs = 4326)
# Load Michigan shapefile
mi_counties <- st_read("GeoFiles/cb_2018_us_county_500k.shp") |>
  filter(STATEFP == "26")
# Map showing site type and degree of hazard
ggplot() +
  geom_sf(data = mi_counties, fill = "lightgrey", color = "black") +
  geom_sf(data = hazard_sites_sf,
          aes(color = type, size = Hazard_Index),
          alpha = 0.8) +
  scale_color_viridis_d(option = "viridis", direction = -1) +
  scale_size_continuous(range = c(2,6)) +
  coord_sf(xlim = c(-90, -82), ylim = c(41, 48)) +
  theme_minimal() +
  labs(title = "PFAS Sites in Michigan by Type and Hazard Index (>1)",
       color = "Site Type",
       size = "Hazard Index",
       caption = "Data source: Michigan PFAS Action Response Team (MPART)") +
  theme(legend.position = "right",
        legend.title = element_text(face = "bold"),
        legend.text = element_text(size = 10))
```

```{r}
# Mean hazard index by type of site and number of sites
# Filter merged_data for Hazard_Index > 1 and remove NA types
hazard_data <- merged_data |>
  filter(Hazard_Index > 1, !is.na(type)) |>
  distinct(hex_id, type, Hazard_Index)  
# Aggregate mean Hazard_Index and count of sites by site type
mean_by_type <- hazard_data |>
  group_by(type) |>
  summarise(mean_hazard = mean(Hazard_Index, na.rm = TRUE),
            n_sites = n(),
            .groups = "drop")
# Order types by mean hazard descending
top_types <- mean_by_type |>
  arrange(desc(mean_hazard)) |>
  slice_head(n = 10)
# Prepare plot data with factor levels for ordering
plot_data <- mean_by_type |>
  filter(type %in% top_types$type) |>
  mutate(type = factor(type, levels = top_types$type))
# Plot mean Hazard_Index by site type with site count labels
ggplot(plot_data, aes(x = type, y = mean_hazard, fill = type)) +
  geom_col(position = position_dodge(width = 0.7), width = 0.7) +
  geom_text(aes(label = n_sites), vjust = -0.5, size = 3.5) +
  scale_fill_viridis_d(option = "viridis") +
  labs(title = "Mean Hazard Index by Site Type (Hazard_Index > 1)",
       x = "Site Type",
       y = "Mean Hazard Index",
       fill = "Site Type",
       caption = "Data source: Michigan PFAS Action Response Team (MPART)",
       subtitle = "Numbers above bars indicate number of sites per type") +
  theme_minimal() +
  theme(legend.position = "right",
        axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
# Visualizing the type of site by the composition of 4 main analytes with the hazard index
# Filter merged_data for Hazard_Index > 1, remove NA types, keep only main analytes
hazard_data <- merged_data |>
  filter(Hazard_Index > 1, !is.na(type)) |>
  distinct(hex_id, type, analyte, analyte_value, Hazard_Index) |>
  filter(analyte %in% hazard_analytes)  
# Summarise total hazard and analyte sums by type
hazard_summary_by_type <- hazard_data |>
  group_by(type, analyte) |>
  summarise(
    sum_analyte = sum(analyte_value, na.rm = TRUE),
    .groups = "drop"
  ) |>
  # Add total hazard per type
  left_join(
    hazard_data |>
      group_by(type) |>
      summarise(total_hazard = sum(Hazard_Index, na.rm = TRUE),
                n_sites = n_distinct(hex_id),
                .groups = "drop"),
    by = "type"
  ) |>
  arrange(desc(total_hazard))
# View as a table
hazard_summary_by_type |>
  flextable() |>
  set_caption("Total Hazard and Main Analytes Distribution by Site Type (Hazard_Index > 1)") |>
  autofit()
```